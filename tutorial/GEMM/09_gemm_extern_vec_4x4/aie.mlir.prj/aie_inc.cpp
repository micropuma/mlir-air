
// This file was auto-generated by aiecc.py --aie-generate-xaie.

#ifndef MLIR_AIE_QUIET
#define __mlir_aie_verbose(x) x
#else
#define __mlir_aie_verbose(x)
#endif

// The following is a wrapper for the common "if(call() != 0) return 1" pattern.
// Use this only in functions that return int. If the call this wrapper is used
// on does not succeed, the expanded code will exit out of the function
// containing this macro with an error code.
#define __mlir_aie_try(x) do { \
  AieRC ret = (x); \
  if(ret != XAIE_OK) { \
    return x; \
  } \
} while(0)

static XAie_DmaDimDesc *__mlir_aie_alloc_dim_desc(size_t ndims) {
  XAie_DmaDimDesc *ret = NULL;
  ret = (XAie_DmaDimDesc *)calloc(sizeof(XAie_DmaDimDesc), ndims);
  if(NULL == ret) {
    __mlir_aie_verbose(fprintf(stderr, "Allocating DmaDimDesc failed.\n"));
  }
  return ret;
}

aie_libxaie_ctx_t* mlir_aie_init_libxaie() {
  aie_libxaie_ctx_t *ctx = new aie_libxaie_ctx_t;
  if (!ctx)
    return 0;
  ctx->AieConfigPtr.AieGen = XAIE_DEV_GEN_AIEML;
  ctx->AieConfigPtr.BaseAddr = 0x20000000000;
  ctx->AieConfigPtr.ColShift = 25;
  ctx->AieConfigPtr.RowShift = 20;
  ctx->AieConfigPtr.NumRows = 6;
  ctx->AieConfigPtr.NumCols = 4;
  ctx->AieConfigPtr.ShimRowNum = 0;
  ctx->AieConfigPtr.MemTileRowStart = 1;
  ctx->AieConfigPtr.MemTileNumRows = 1;
  //  ctx->AieConfigPtr.ReservedRowStart = XAIE_RES_TILE_ROW_START;
  //  ctx->AieConfigPtr.ReservedNumRows  = XAIE_RES_TILE_NUM_ROWS;
  ctx->AieConfigPtr.AieTileRowStart = 2;
  ctx->AieConfigPtr.AieTileNumRows = 4;
  ctx->AieConfigPtr.PartProp = {0};
  ctx->DevInst = {0};
  return ctx;
}

int mlir_aie_configure_cores(aie_libxaie_ctx_t* ctx) {
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,2)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,2), (const char*)"matmul_bf16_0_core_0_2.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 2, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(1,2)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(1,2), (const char*)"matmul_bf16_0_core_1_2.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 1, 2, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(2,2)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(2,2), (const char*)"matmul_bf16_0_core_2_2.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 2, 2, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(3,2)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(3,2), (const char*)"matmul_bf16_0_core_3_2.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 3, 2, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,3)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,3), (const char*)"matmul_bf16_0_core_0_3.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 3, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(1,3)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(1,3), (const char*)"matmul_bf16_0_core_1_3.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 1, 3, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(2,3)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(2,3), (const char*)"matmul_bf16_0_core_2_3.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 2, 3, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(3,3)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(3,3), (const char*)"matmul_bf16_0_core_3_3.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 3, 3, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,4)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,4), (const char*)"matmul_bf16_0_core_0_4.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 4, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(1,4)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(1,4), (const char*)"matmul_bf16_0_core_1_4.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 1, 4, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(2,4)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(2,4), (const char*)"matmul_bf16_0_core_2_4.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 2, 4, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(3,4)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(3,4), (const char*)"matmul_bf16_0_core_3_4.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 3, 4, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,5)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,5), (const char*)"matmul_bf16_0_core_0_5.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 5, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(1,5)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(1,5), (const char*)"matmul_bf16_0_core_1_5.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 1, 5, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(2,5)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(2,5), (const char*)"matmul_bf16_0_core_2_5.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 2, 5, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(3,5)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(3,5)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(3,5), (const char*)"matmul_bf16_0_core_3_5.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 3, 5, RC));
assert(RC == XAIE_OK);
}
return XAIE_OK;
} // mlir_aie_configure_cores

int mlir_aie_start_cores(aie_libxaie_ctx_t* ctx) {
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(3,5)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(3,5)));
return XAIE_OK;
} // mlir_aie_start_cores

int mlir_aie_configure_dmas(aie_libxaie_ctx_t* ctx) {
XAie_DmaDesc dma_tile35_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile35_bd0), XAie_TileLoc(3,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile35_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile35_bd0), /* addrA */ 0xC000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile35_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile35_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile35_bd0), XAie_TileLoc(3,5),  /* bd */ 0));
XAie_DmaDesc dma_tile35_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile35_bd1), XAie_TileLoc(3,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile35_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile35_bd1), /* addrA */ 0x8000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile35_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile35_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile35_bd1), XAie_TileLoc(3,5),  /* bd */ 1));
XAie_DmaDesc dma_tile35_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile35_bd2), XAie_TileLoc(3,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile35_bd2), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile35_bd2), /* addrA */ 0x6000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile35_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile35_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile35_bd2), XAie_TileLoc(3,5),  /* bd */ 2));
XAie_DmaDesc dma_tile35_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile35_bd3), XAie_TileLoc(3,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile35_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile35_bd3), /* addrA */ 0x4000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile35_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile35_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile35_bd3), XAie_TileLoc(3,5),  /* bd */ 3));
XAie_DmaDesc dma_tile35_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile35_bd4), XAie_TileLoc(3,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile35_bd4), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
XAie_DmaTensor dma_tile_3_5_bd_4_tensor = {};
dma_tile_3_5_bd_4_tensor.NumDim = 3;
dma_tile_3_5_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_3_5_bd_4_tensor.Dim){
  return 1;
}
dma_tile_3_5_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 64};
dma_tile_3_5_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 16};
dma_tile_3_5_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile35_bd4), &dma_tile_3_5_bd_4_tensor, 0x400,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile35_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile35_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile35_bd4), XAie_TileLoc(3,5),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,5), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,5), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,5), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,5), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,5), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,5), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile25_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile25_bd0), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile25_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile25_bd0), /* addrA */ 0xC000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile25_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile25_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile25_bd0), XAie_TileLoc(2,5),  /* bd */ 0));
XAie_DmaDesc dma_tile25_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile25_bd1), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile25_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile25_bd1), /* addrA */ 0x8000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile25_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile25_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile25_bd1), XAie_TileLoc(2,5),  /* bd */ 1));
XAie_DmaDesc dma_tile25_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile25_bd2), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile25_bd2), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile25_bd2), /* addrA */ 0x6000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile25_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile25_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile25_bd2), XAie_TileLoc(2,5),  /* bd */ 2));
XAie_DmaDesc dma_tile25_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile25_bd3), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile25_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile25_bd3), /* addrA */ 0x4000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile25_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile25_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile25_bd3), XAie_TileLoc(2,5),  /* bd */ 3));
XAie_DmaDesc dma_tile25_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile25_bd4), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile25_bd4), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
XAie_DmaTensor dma_tile_2_5_bd_4_tensor = {};
dma_tile_2_5_bd_4_tensor.NumDim = 3;
dma_tile_2_5_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_2_5_bd_4_tensor.Dim){
  return 1;
}
dma_tile_2_5_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 64};
dma_tile_2_5_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 16};
dma_tile_2_5_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile25_bd4), &dma_tile_2_5_bd_4_tensor, 0x400,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile25_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile25_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile25_bd4), XAie_TileLoc(2,5),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,5), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,5), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,5), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,5), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,5), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,5), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile15_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile15_bd0), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile15_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile15_bd0), /* addrA */ 0xC000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile15_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile15_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile15_bd0), XAie_TileLoc(1,5),  /* bd */ 0));
XAie_DmaDesc dma_tile15_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile15_bd1), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile15_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile15_bd1), /* addrA */ 0x8000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile15_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile15_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile15_bd1), XAie_TileLoc(1,5),  /* bd */ 1));
XAie_DmaDesc dma_tile15_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile15_bd2), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile15_bd2), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile15_bd2), /* addrA */ 0x6000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile15_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile15_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile15_bd2), XAie_TileLoc(1,5),  /* bd */ 2));
XAie_DmaDesc dma_tile15_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile15_bd3), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile15_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile15_bd3), /* addrA */ 0x4000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile15_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile15_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile15_bd3), XAie_TileLoc(1,5),  /* bd */ 3));
XAie_DmaDesc dma_tile15_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile15_bd4), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile15_bd4), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
XAie_DmaTensor dma_tile_1_5_bd_4_tensor = {};
dma_tile_1_5_bd_4_tensor.NumDim = 3;
dma_tile_1_5_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_1_5_bd_4_tensor.Dim){
  return 1;
}
dma_tile_1_5_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 64};
dma_tile_1_5_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 16};
dma_tile_1_5_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile15_bd4), &dma_tile_1_5_bd_4_tensor, 0x400,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile15_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile15_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile15_bd4), XAie_TileLoc(1,5),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,5), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,5), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,5), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,5), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,5), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,5), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile05_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd0), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile05_bd0), /* addrA */ 0xC000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd0), XAie_TileLoc(0,5),  /* bd */ 0));
XAie_DmaDesc dma_tile05_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd1), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile05_bd1), /* addrA */ 0x8000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd1), XAie_TileLoc(0,5),  /* bd */ 1));
XAie_DmaDesc dma_tile05_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd2), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd2), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile05_bd2), /* addrA */ 0x6000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd2), XAie_TileLoc(0,5),  /* bd */ 2));
XAie_DmaDesc dma_tile05_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd3), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile05_bd3), /* addrA */ 0x4000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd3), XAie_TileLoc(0,5),  /* bd */ 3));
XAie_DmaDesc dma_tile05_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile05_bd4), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile05_bd4), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
XAie_DmaTensor dma_tile_0_5_bd_4_tensor = {};
dma_tile_0_5_bd_4_tensor.NumDim = 3;
dma_tile_0_5_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_0_5_bd_4_tensor.Dim){
  return 1;
}
dma_tile_0_5_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 64};
dma_tile_0_5_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 16};
dma_tile_0_5_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile05_bd4), &dma_tile_0_5_bd_4_tensor, 0x400,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile05_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile05_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile05_bd4), XAie_TileLoc(0,5),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,5), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile34_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile34_bd0), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile34_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile34_bd0), /* addrA */ 0xC000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile34_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile34_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile34_bd0), XAie_TileLoc(3,4),  /* bd */ 0));
XAie_DmaDesc dma_tile34_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile34_bd1), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile34_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile34_bd1), /* addrA */ 0x8000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile34_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile34_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile34_bd1), XAie_TileLoc(3,4),  /* bd */ 1));
XAie_DmaDesc dma_tile34_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile34_bd2), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile34_bd2), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile34_bd2), /* addrA */ 0x6000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile34_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile34_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile34_bd2), XAie_TileLoc(3,4),  /* bd */ 2));
XAie_DmaDesc dma_tile34_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile34_bd3), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile34_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile34_bd3), /* addrA */ 0x4000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile34_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile34_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile34_bd3), XAie_TileLoc(3,4),  /* bd */ 3));
XAie_DmaDesc dma_tile34_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile34_bd4), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile34_bd4), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
XAie_DmaTensor dma_tile_3_4_bd_4_tensor = {};
dma_tile_3_4_bd_4_tensor.NumDim = 3;
dma_tile_3_4_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_3_4_bd_4_tensor.Dim){
  return 1;
}
dma_tile_3_4_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 64};
dma_tile_3_4_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 16};
dma_tile_3_4_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile34_bd4), &dma_tile_3_4_bd_4_tensor, 0x400,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile34_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile34_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile34_bd4), XAie_TileLoc(3,4),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,4), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,4), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,4), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,4), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,4), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,4), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile24_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile24_bd0), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile24_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile24_bd0), /* addrA */ 0xC000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile24_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile24_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile24_bd0), XAie_TileLoc(2,4),  /* bd */ 0));
XAie_DmaDesc dma_tile24_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile24_bd1), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile24_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile24_bd1), /* addrA */ 0x8000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile24_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile24_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile24_bd1), XAie_TileLoc(2,4),  /* bd */ 1));
XAie_DmaDesc dma_tile24_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile24_bd2), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile24_bd2), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile24_bd2), /* addrA */ 0x6000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile24_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile24_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile24_bd2), XAie_TileLoc(2,4),  /* bd */ 2));
XAie_DmaDesc dma_tile24_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile24_bd3), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile24_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile24_bd3), /* addrA */ 0x4000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile24_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile24_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile24_bd3), XAie_TileLoc(2,4),  /* bd */ 3));
XAie_DmaDesc dma_tile24_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile24_bd4), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile24_bd4), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
XAie_DmaTensor dma_tile_2_4_bd_4_tensor = {};
dma_tile_2_4_bd_4_tensor.NumDim = 3;
dma_tile_2_4_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_2_4_bd_4_tensor.Dim){
  return 1;
}
dma_tile_2_4_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 64};
dma_tile_2_4_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 16};
dma_tile_2_4_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile24_bd4), &dma_tile_2_4_bd_4_tensor, 0x400,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile24_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile24_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile24_bd4), XAie_TileLoc(2,4),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,4), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,4), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,4), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,4), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,4), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,4), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile14_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile14_bd0), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile14_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile14_bd0), /* addrA */ 0xC000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile14_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile14_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile14_bd0), XAie_TileLoc(1,4),  /* bd */ 0));
XAie_DmaDesc dma_tile14_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile14_bd1), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile14_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile14_bd1), /* addrA */ 0x8000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile14_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile14_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile14_bd1), XAie_TileLoc(1,4),  /* bd */ 1));
XAie_DmaDesc dma_tile14_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile14_bd2), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile14_bd2), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile14_bd2), /* addrA */ 0x6000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile14_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile14_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile14_bd2), XAie_TileLoc(1,4),  /* bd */ 2));
XAie_DmaDesc dma_tile14_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile14_bd3), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile14_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile14_bd3), /* addrA */ 0x4000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile14_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile14_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile14_bd3), XAie_TileLoc(1,4),  /* bd */ 3));
XAie_DmaDesc dma_tile14_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile14_bd4), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile14_bd4), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
XAie_DmaTensor dma_tile_1_4_bd_4_tensor = {};
dma_tile_1_4_bd_4_tensor.NumDim = 3;
dma_tile_1_4_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_1_4_bd_4_tensor.Dim){
  return 1;
}
dma_tile_1_4_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 64};
dma_tile_1_4_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 16};
dma_tile_1_4_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile14_bd4), &dma_tile_1_4_bd_4_tensor, 0x400,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile14_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile14_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile14_bd4), XAie_TileLoc(1,4),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile04_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd0), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile04_bd0), /* addrA */ 0xC000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd0), XAie_TileLoc(0,4),  /* bd */ 0));
XAie_DmaDesc dma_tile04_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd1), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile04_bd1), /* addrA */ 0x8000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd1), XAie_TileLoc(0,4),  /* bd */ 1));
XAie_DmaDesc dma_tile04_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd2), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd2), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile04_bd2), /* addrA */ 0x6000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd2), XAie_TileLoc(0,4),  /* bd */ 2));
XAie_DmaDesc dma_tile04_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd3), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile04_bd3), /* addrA */ 0x4000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd3), XAie_TileLoc(0,4),  /* bd */ 3));
XAie_DmaDesc dma_tile04_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile04_bd4), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile04_bd4), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
XAie_DmaTensor dma_tile_0_4_bd_4_tensor = {};
dma_tile_0_4_bd_4_tensor.NumDim = 3;
dma_tile_0_4_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_0_4_bd_4_tensor.Dim){
  return 1;
}
dma_tile_0_4_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 64};
dma_tile_0_4_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 16};
dma_tile_0_4_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile04_bd4), &dma_tile_0_4_bd_4_tensor, 0x400,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile04_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile04_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile04_bd4), XAie_TileLoc(0,4),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,4), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile33_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile33_bd0), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile33_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile33_bd0), /* addrA */ 0xC000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile33_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile33_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile33_bd0), XAie_TileLoc(3,3),  /* bd */ 0));
XAie_DmaDesc dma_tile33_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile33_bd1), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile33_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile33_bd1), /* addrA */ 0x8000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile33_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile33_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile33_bd1), XAie_TileLoc(3,3),  /* bd */ 1));
XAie_DmaDesc dma_tile33_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile33_bd2), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile33_bd2), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile33_bd2), /* addrA */ 0x6000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile33_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile33_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile33_bd2), XAie_TileLoc(3,3),  /* bd */ 2));
XAie_DmaDesc dma_tile33_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile33_bd3), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile33_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile33_bd3), /* addrA */ 0x4000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile33_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile33_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile33_bd3), XAie_TileLoc(3,3),  /* bd */ 3));
XAie_DmaDesc dma_tile33_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile33_bd4), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile33_bd4), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
XAie_DmaTensor dma_tile_3_3_bd_4_tensor = {};
dma_tile_3_3_bd_4_tensor.NumDim = 3;
dma_tile_3_3_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_3_3_bd_4_tensor.Dim){
  return 1;
}
dma_tile_3_3_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 64};
dma_tile_3_3_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 16};
dma_tile_3_3_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile33_bd4), &dma_tile_3_3_bd_4_tensor, 0x400,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile33_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile33_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile33_bd4), XAie_TileLoc(3,3),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,3), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,3), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,3), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,3), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,3), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,3), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile23_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile23_bd0), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile23_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile23_bd0), /* addrA */ 0xC000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile23_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile23_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile23_bd0), XAie_TileLoc(2,3),  /* bd */ 0));
XAie_DmaDesc dma_tile23_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile23_bd1), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile23_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile23_bd1), /* addrA */ 0x8000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile23_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile23_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile23_bd1), XAie_TileLoc(2,3),  /* bd */ 1));
XAie_DmaDesc dma_tile23_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile23_bd2), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile23_bd2), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile23_bd2), /* addrA */ 0x6000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile23_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile23_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile23_bd2), XAie_TileLoc(2,3),  /* bd */ 2));
XAie_DmaDesc dma_tile23_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile23_bd3), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile23_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile23_bd3), /* addrA */ 0x4000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile23_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile23_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile23_bd3), XAie_TileLoc(2,3),  /* bd */ 3));
XAie_DmaDesc dma_tile23_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile23_bd4), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile23_bd4), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
XAie_DmaTensor dma_tile_2_3_bd_4_tensor = {};
dma_tile_2_3_bd_4_tensor.NumDim = 3;
dma_tile_2_3_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_2_3_bd_4_tensor.Dim){
  return 1;
}
dma_tile_2_3_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 64};
dma_tile_2_3_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 16};
dma_tile_2_3_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile23_bd4), &dma_tile_2_3_bd_4_tensor, 0x400,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile23_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile23_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile23_bd4), XAie_TileLoc(2,3),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,3), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,3), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,3), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,3), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,3), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,3), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile13_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile13_bd0), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile13_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile13_bd0), /* addrA */ 0xC000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile13_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile13_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile13_bd0), XAie_TileLoc(1,3),  /* bd */ 0));
XAie_DmaDesc dma_tile13_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile13_bd1), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile13_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile13_bd1), /* addrA */ 0x8000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile13_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile13_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile13_bd1), XAie_TileLoc(1,3),  /* bd */ 1));
XAie_DmaDesc dma_tile13_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile13_bd2), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile13_bd2), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile13_bd2), /* addrA */ 0x6000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile13_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile13_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile13_bd2), XAie_TileLoc(1,3),  /* bd */ 2));
XAie_DmaDesc dma_tile13_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile13_bd3), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile13_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile13_bd3), /* addrA */ 0x4000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile13_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile13_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile13_bd3), XAie_TileLoc(1,3),  /* bd */ 3));
XAie_DmaDesc dma_tile13_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile13_bd4), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile13_bd4), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
XAie_DmaTensor dma_tile_1_3_bd_4_tensor = {};
dma_tile_1_3_bd_4_tensor.NumDim = 3;
dma_tile_1_3_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_1_3_bd_4_tensor.Dim){
  return 1;
}
dma_tile_1_3_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 64};
dma_tile_1_3_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 16};
dma_tile_1_3_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile13_bd4), &dma_tile_1_3_bd_4_tensor, 0x400,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile13_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile13_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile13_bd4), XAie_TileLoc(1,3),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,3), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,3), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,3), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,3), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,3), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,3), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile03_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd0), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd0), /* addrA */ 0xC000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd0), XAie_TileLoc(0,3),  /* bd */ 0));
XAie_DmaDesc dma_tile03_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd1), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd1), /* addrA */ 0x8000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd1), XAie_TileLoc(0,3),  /* bd */ 1));
XAie_DmaDesc dma_tile03_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd2), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd2), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd2), /* addrA */ 0x6000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd2), XAie_TileLoc(0,3),  /* bd */ 2));
XAie_DmaDesc dma_tile03_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd3), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd3), /* addrA */ 0x4000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd3), XAie_TileLoc(0,3),  /* bd */ 3));
XAie_DmaDesc dma_tile03_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd4), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd4), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
XAie_DmaTensor dma_tile_0_3_bd_4_tensor = {};
dma_tile_0_3_bd_4_tensor.NumDim = 3;
dma_tile_0_3_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_0_3_bd_4_tensor.Dim){
  return 1;
}
dma_tile_0_3_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 64};
dma_tile_0_3_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 16};
dma_tile_0_3_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile03_bd4), &dma_tile_0_3_bd_4_tensor, 0x400,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd4), XAie_TileLoc(0,3),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile32_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile32_bd0), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile32_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile32_bd0), /* addrA */ 0xC000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile32_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile32_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile32_bd0), XAie_TileLoc(3,2),  /* bd */ 0));
XAie_DmaDesc dma_tile32_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile32_bd1), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile32_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile32_bd1), /* addrA */ 0x8000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile32_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile32_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile32_bd1), XAie_TileLoc(3,2),  /* bd */ 1));
XAie_DmaDesc dma_tile32_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile32_bd2), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile32_bd2), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile32_bd2), /* addrA */ 0x6000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile32_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile32_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile32_bd2), XAie_TileLoc(3,2),  /* bd */ 2));
XAie_DmaDesc dma_tile32_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile32_bd3), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile32_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile32_bd3), /* addrA */ 0x4000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile32_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile32_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile32_bd3), XAie_TileLoc(3,2),  /* bd */ 3));
XAie_DmaDesc dma_tile32_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile32_bd4), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile32_bd4), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
XAie_DmaTensor dma_tile_3_2_bd_4_tensor = {};
dma_tile_3_2_bd_4_tensor.NumDim = 3;
dma_tile_3_2_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_3_2_bd_4_tensor.Dim){
  return 1;
}
dma_tile_3_2_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 64};
dma_tile_3_2_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 16};
dma_tile_3_2_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile32_bd4), &dma_tile_3_2_bd_4_tensor, 0x400,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile32_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile32_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile32_bd4), XAie_TileLoc(3,2),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile22_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile22_bd0), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile22_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile22_bd0), /* addrA */ 0xC000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile22_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile22_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile22_bd0), XAie_TileLoc(2,2),  /* bd */ 0));
XAie_DmaDesc dma_tile22_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile22_bd1), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile22_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile22_bd1), /* addrA */ 0x8000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile22_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile22_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile22_bd1), XAie_TileLoc(2,2),  /* bd */ 1));
XAie_DmaDesc dma_tile22_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile22_bd2), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile22_bd2), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile22_bd2), /* addrA */ 0x6000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile22_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile22_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile22_bd2), XAie_TileLoc(2,2),  /* bd */ 2));
XAie_DmaDesc dma_tile22_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile22_bd3), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile22_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile22_bd3), /* addrA */ 0x4000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile22_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile22_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile22_bd3), XAie_TileLoc(2,2),  /* bd */ 3));
XAie_DmaDesc dma_tile22_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile22_bd4), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile22_bd4), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
XAie_DmaTensor dma_tile_2_2_bd_4_tensor = {};
dma_tile_2_2_bd_4_tensor.NumDim = 3;
dma_tile_2_2_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_2_2_bd_4_tensor.Dim){
  return 1;
}
dma_tile_2_2_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 64};
dma_tile_2_2_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 16};
dma_tile_2_2_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile22_bd4), &dma_tile_2_2_bd_4_tensor, 0x400,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile22_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile22_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile22_bd4), XAie_TileLoc(2,2),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,2), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,2), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,2), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,2), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,2), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,2), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile12_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd0), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd0), /* addrA */ 0xC000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd0), XAie_TileLoc(1,2),  /* bd */ 0));
XAie_DmaDesc dma_tile12_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd1), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd1), /* addrA */ 0x8000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd1), XAie_TileLoc(1,2),  /* bd */ 1));
XAie_DmaDesc dma_tile12_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd2), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd2), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd2), /* addrA */ 0x6000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd2), XAie_TileLoc(1,2),  /* bd */ 2));
XAie_DmaDesc dma_tile12_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd3), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd3), /* addrA */ 0x4000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd3), XAie_TileLoc(1,2),  /* bd */ 3));
XAie_DmaDesc dma_tile12_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd4), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd4), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
XAie_DmaTensor dma_tile_1_2_bd_4_tensor = {};
dma_tile_1_2_bd_4_tensor.NumDim = 3;
dma_tile_1_2_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_1_2_bd_4_tensor.Dim){
  return 1;
}
dma_tile_1_2_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 64};
dma_tile_1_2_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 16};
dma_tile_1_2_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile12_bd4), &dma_tile_1_2_bd_4_tensor, 0x400,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd4), XAie_TileLoc(1,2),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile02_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile02_bd0), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile02_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile02_bd0), /* addrA */ 0xC000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile02_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile02_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile02_bd0), XAie_TileLoc(0,2),  /* bd */ 0));
XAie_DmaDesc dma_tile02_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile02_bd1), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile02_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile02_bd1), /* addrA */ 0x8000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile02_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile02_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile02_bd1), XAie_TileLoc(0,2),  /* bd */ 1));
XAie_DmaDesc dma_tile02_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile02_bd2), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile02_bd2), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile02_bd2), /* addrA */ 0x6000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile02_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile02_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile02_bd2), XAie_TileLoc(0,2),  /* bd */ 2));
XAie_DmaDesc dma_tile02_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile02_bd3), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile02_bd3), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile02_bd3), /* addrA */ 0x4000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile02_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile02_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile02_bd3), XAie_TileLoc(0,2),  /* bd */ 3));
XAie_DmaDesc dma_tile02_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile02_bd4), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile02_bd4), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
XAie_DmaTensor dma_tile_0_2_bd_4_tensor = {};
dma_tile_0_2_bd_4_tensor.NumDim = 3;
dma_tile_0_2_bd_4_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_0_2_bd_4_tensor.Dim){
  return 1;
}
dma_tile_0_2_bd_4_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 64};
dma_tile_0_2_bd_4_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 16};
dma_tile_0_2_bd_4_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile02_bd4), &dma_tile_0_2_bd_4_tensor, 0x400,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile02_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile02_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile02_bd4), XAie_TileLoc(0,2),  /* bd */ 4));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,2), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile01_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd0), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd0), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd0), /* addrA */ 0xC0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd0), XAie_TileLoc(0,1),  /* bd */ 0));
XAie_DmaDesc dma_tile01_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd1), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd1), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd1), /* addrA */ 0xA0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd1), XAie_TileLoc(0,1),  /* bd */ 1));
XAie_DmaDesc dma_tile01_bd24;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd24), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd24), XAie_LockInit(69,-1),XAie_LockInit(68,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd24), /* addrA */ 0xB0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd24),  /* nextbd */ 25,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd24)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd24), XAie_TileLoc(0,1),  /* bd */ 24));
XAie_DmaDesc dma_tile01_bd25;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd25), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd25), XAie_LockInit(71,-1),XAie_LockInit(70,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd25), /* addrA */ 0x90000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd25),  /* nextbd */ 24,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd25)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd25), XAie_TileLoc(0,1),  /* bd */ 25));
XAie_DmaDesc dma_tile01_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd2), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd2), XAie_LockInit(73,-1),XAie_LockInit(72,1)));
XAie_DmaTensor dma_tile_0_1_bd_2_tensor = {};
dma_tile_0_1_bd_2_tensor.NumDim = 2;
dma_tile_0_1_bd_2_tensor.Dim =__mlir_aie_alloc_dim_desc(2);
if(NULL == dma_tile_0_1_bd_2_tensor.Dim){
  return 1;
}
dma_tile_0_1_bd_2_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_0_1_bd_2_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 32};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile01_bd2), &dma_tile_0_1_bd_2_tensor, 0x80000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd2),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd2), XAie_TileLoc(0,1),  /* bd */ 2));
XAie_DmaDesc dma_tile01_bd26;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd26), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd26), XAie_LockInit(73,-1),XAie_LockInit(72,1)));
XAie_DmaTensor dma_tile_0_1_bd_26_tensor = {};
dma_tile_0_1_bd_26_tensor.NumDim = 2;
dma_tile_0_1_bd_26_tensor.Dim =__mlir_aie_alloc_dim_desc(2);
if(NULL == dma_tile_0_1_bd_26_tensor.Dim){
  return 1;
}
dma_tile_0_1_bd_26_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_0_1_bd_26_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 32};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile01_bd26), &dma_tile_0_1_bd_26_tensor, 0x80080,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd26),  /* nextbd */ 26,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd26)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd26), XAie_TileLoc(0,1),  /* bd */ 26));
XAie_DmaDesc dma_tile01_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd3), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd3), XAie_LockInit(73,-1),XAie_LockInit(72,1)));
XAie_DmaTensor dma_tile_0_1_bd_3_tensor = {};
dma_tile_0_1_bd_3_tensor.NumDim = 2;
dma_tile_0_1_bd_3_tensor.Dim =__mlir_aie_alloc_dim_desc(2);
if(NULL == dma_tile_0_1_bd_3_tensor.Dim){
  return 1;
}
dma_tile_0_1_bd_3_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_0_1_bd_3_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 32};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile01_bd3), &dma_tile_0_1_bd_3_tensor, 0x80100,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd3),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd3), XAie_TileLoc(0,1),  /* bd */ 3));
XAie_DmaDesc dma_tile01_bd27;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd27), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd27), XAie_LockInit(73,-1),XAie_LockInit(72,1)));
XAie_DmaTensor dma_tile_0_1_bd_27_tensor = {};
dma_tile_0_1_bd_27_tensor.NumDim = 2;
dma_tile_0_1_bd_27_tensor.Dim =__mlir_aie_alloc_dim_desc(2);
if(NULL == dma_tile_0_1_bd_27_tensor.Dim){
  return 1;
}
dma_tile_0_1_bd_27_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_0_1_bd_27_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 32};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile01_bd27), &dma_tile_0_1_bd_27_tensor, 0x80180,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd27),  /* nextbd */ 27,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd27)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd27), XAie_TileLoc(0,1),  /* bd */ 27));
XAie_DmaDesc dma_tile01_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd4), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd4), XAie_LockInit(72,-4),XAie_LockInit(73,4)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile01_bd4), /* addrA */ 0x80000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd4), XAie_TileLoc(0,1),  /* bd */ 4));
XAie_DmaDesc dma_tile01_bd28;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd28), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd28), XAie_LockInit(64,-1),XAie_LockInit(65,1)));
XAie_DmaTensor dma_tile_0_1_bd_28_tensor = {};
dma_tile_0_1_bd_28_tensor.NumDim = 3;
dma_tile_0_1_bd_28_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_0_1_bd_28_tensor.Dim){
  return 1;
}
dma_tile_0_1_bd_28_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 4, /* Size */ 32};
dma_tile_0_1_bd_28_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_0_1_bd_28_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 4};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile01_bd28), &dma_tile_0_1_bd_28_tensor, 0xC0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd28),  /* nextbd */ 29,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd28)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd28), XAie_TileLoc(0,1),  /* bd */ 28));
XAie_DmaDesc dma_tile01_bd29;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd29), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd29), XAie_LockInit(66,-1),XAie_LockInit(67,1)));
XAie_DmaTensor dma_tile_0_1_bd_29_tensor = {};
dma_tile_0_1_bd_29_tensor.NumDim = 3;
dma_tile_0_1_bd_29_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_0_1_bd_29_tensor.Dim){
  return 1;
}
dma_tile_0_1_bd_29_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 4, /* Size */ 32};
dma_tile_0_1_bd_29_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_0_1_bd_29_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 4};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile01_bd29), &dma_tile_0_1_bd_29_tensor, 0xA0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd29),  /* nextbd */ 28,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd29)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd29), XAie_TileLoc(0,1),  /* bd */ 29));
XAie_DmaDesc dma_tile01_bd5;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd5), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd5), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
XAie_DmaTensor dma_tile_0_1_bd_5_tensor = {};
dma_tile_0_1_bd_5_tensor.NumDim = 4;
dma_tile_0_1_bd_5_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_0_1_bd_5_tensor.Dim){
  return 1;
}
dma_tile_0_1_bd_5_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 2048, /* Size */ 4};
dma_tile_0_1_bd_5_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 16};
dma_tile_0_1_bd_5_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 32, /* Size */ 64};
dma_tile_0_1_bd_5_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile01_bd5), &dma_tile_0_1_bd_5_tensor, 0xB0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd5),  /* nextbd */ 6,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd5)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd5), XAie_TileLoc(0,1),  /* bd */ 5));
XAie_DmaDesc dma_tile01_bd6;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile01_bd6), XAie_TileLoc(0,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile01_bd6), XAie_LockInit(70,-1),XAie_LockInit(71,1)));
XAie_DmaTensor dma_tile_0_1_bd_6_tensor = {};
dma_tile_0_1_bd_6_tensor.NumDim = 4;
dma_tile_0_1_bd_6_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_0_1_bd_6_tensor.Dim){
  return 1;
}
dma_tile_0_1_bd_6_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 2048, /* Size */ 4};
dma_tile_0_1_bd_6_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 16};
dma_tile_0_1_bd_6_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 32, /* Size */ 64};
dma_tile_0_1_bd_6_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile01_bd6), &dma_tile_0_1_bd_6_tensor, 0x90000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile01_bd6),  /* nextbd */ 5,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile01_bd6)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile01_bd6), XAie_TileLoc(0,1),  /* bd */ 6));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */24, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */2, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 2, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */3, /* dmaDir */ DMA_S2MM, /* BdNum */26, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 3, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */4, /* dmaDir */ DMA_S2MM, /* BdNum */3, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 4, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */5, /* dmaDir */ DMA_S2MM, /* BdNum */27, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 5, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */1, /* dmaDir */ DMA_MM2S, /* BdNum */28, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 1, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */2, /* dmaDir */ DMA_MM2S, /* BdNum */5, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,1), /* ChNum */ 2, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile11_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd0), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd0), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd0), /* addrA */ 0xC0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd0), XAie_TileLoc(1,1),  /* bd */ 0));
XAie_DmaDesc dma_tile11_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd1), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd1), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd1), /* addrA */ 0xA0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd1), XAie_TileLoc(1,1),  /* bd */ 1));
XAie_DmaDesc dma_tile11_bd24;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd24), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd24), XAie_LockInit(69,-1),XAie_LockInit(68,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd24), /* addrA */ 0xB0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd24),  /* nextbd */ 25,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd24)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd24), XAie_TileLoc(1,1),  /* bd */ 24));
XAie_DmaDesc dma_tile11_bd25;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd25), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd25), XAie_LockInit(71,-1),XAie_LockInit(70,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd25), /* addrA */ 0x90000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd25),  /* nextbd */ 24,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd25)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd25), XAie_TileLoc(1,1),  /* bd */ 25));
XAie_DmaDesc dma_tile11_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd2), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd2), XAie_LockInit(73,-1),XAie_LockInit(72,1)));
XAie_DmaTensor dma_tile_1_1_bd_2_tensor = {};
dma_tile_1_1_bd_2_tensor.NumDim = 2;
dma_tile_1_1_bd_2_tensor.Dim =__mlir_aie_alloc_dim_desc(2);
if(NULL == dma_tile_1_1_bd_2_tensor.Dim){
  return 1;
}
dma_tile_1_1_bd_2_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_1_1_bd_2_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 32};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile11_bd2), &dma_tile_1_1_bd_2_tensor, 0x80000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd2),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd2), XAie_TileLoc(1,1),  /* bd */ 2));
XAie_DmaDesc dma_tile11_bd26;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd26), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd26), XAie_LockInit(73,-1),XAie_LockInit(72,1)));
XAie_DmaTensor dma_tile_1_1_bd_26_tensor = {};
dma_tile_1_1_bd_26_tensor.NumDim = 2;
dma_tile_1_1_bd_26_tensor.Dim =__mlir_aie_alloc_dim_desc(2);
if(NULL == dma_tile_1_1_bd_26_tensor.Dim){
  return 1;
}
dma_tile_1_1_bd_26_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_1_1_bd_26_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 32};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile11_bd26), &dma_tile_1_1_bd_26_tensor, 0x80080,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd26),  /* nextbd */ 26,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd26)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd26), XAie_TileLoc(1,1),  /* bd */ 26));
XAie_DmaDesc dma_tile11_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd3), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd3), XAie_LockInit(73,-1),XAie_LockInit(72,1)));
XAie_DmaTensor dma_tile_1_1_bd_3_tensor = {};
dma_tile_1_1_bd_3_tensor.NumDim = 2;
dma_tile_1_1_bd_3_tensor.Dim =__mlir_aie_alloc_dim_desc(2);
if(NULL == dma_tile_1_1_bd_3_tensor.Dim){
  return 1;
}
dma_tile_1_1_bd_3_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_1_1_bd_3_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 32};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile11_bd3), &dma_tile_1_1_bd_3_tensor, 0x80100,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd3),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd3), XAie_TileLoc(1,1),  /* bd */ 3));
XAie_DmaDesc dma_tile11_bd27;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd27), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd27), XAie_LockInit(73,-1),XAie_LockInit(72,1)));
XAie_DmaTensor dma_tile_1_1_bd_27_tensor = {};
dma_tile_1_1_bd_27_tensor.NumDim = 2;
dma_tile_1_1_bd_27_tensor.Dim =__mlir_aie_alloc_dim_desc(2);
if(NULL == dma_tile_1_1_bd_27_tensor.Dim){
  return 1;
}
dma_tile_1_1_bd_27_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_1_1_bd_27_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 32};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile11_bd27), &dma_tile_1_1_bd_27_tensor, 0x80180,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd27),  /* nextbd */ 27,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd27)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd27), XAie_TileLoc(1,1),  /* bd */ 27));
XAie_DmaDesc dma_tile11_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd4), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd4), XAie_LockInit(72,-4),XAie_LockInit(73,4)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd4), /* addrA */ 0x80000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd4), XAie_TileLoc(1,1),  /* bd */ 4));
XAie_DmaDesc dma_tile11_bd28;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd28), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd28), XAie_LockInit(64,-1),XAie_LockInit(65,1)));
XAie_DmaTensor dma_tile_1_1_bd_28_tensor = {};
dma_tile_1_1_bd_28_tensor.NumDim = 3;
dma_tile_1_1_bd_28_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_1_1_bd_28_tensor.Dim){
  return 1;
}
dma_tile_1_1_bd_28_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 4, /* Size */ 32};
dma_tile_1_1_bd_28_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_1_1_bd_28_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 4};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile11_bd28), &dma_tile_1_1_bd_28_tensor, 0xC0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd28),  /* nextbd */ 29,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd28)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd28), XAie_TileLoc(1,1),  /* bd */ 28));
XAie_DmaDesc dma_tile11_bd29;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd29), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd29), XAie_LockInit(66,-1),XAie_LockInit(67,1)));
XAie_DmaTensor dma_tile_1_1_bd_29_tensor = {};
dma_tile_1_1_bd_29_tensor.NumDim = 3;
dma_tile_1_1_bd_29_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_1_1_bd_29_tensor.Dim){
  return 1;
}
dma_tile_1_1_bd_29_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 4, /* Size */ 32};
dma_tile_1_1_bd_29_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_1_1_bd_29_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 4};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile11_bd29), &dma_tile_1_1_bd_29_tensor, 0xA0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd29),  /* nextbd */ 28,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd29)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd29), XAie_TileLoc(1,1),  /* bd */ 29));
XAie_DmaDesc dma_tile11_bd5;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd5), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd5), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
XAie_DmaTensor dma_tile_1_1_bd_5_tensor = {};
dma_tile_1_1_bd_5_tensor.NumDim = 4;
dma_tile_1_1_bd_5_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_1_1_bd_5_tensor.Dim){
  return 1;
}
dma_tile_1_1_bd_5_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 2048, /* Size */ 4};
dma_tile_1_1_bd_5_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 16};
dma_tile_1_1_bd_5_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 32, /* Size */ 64};
dma_tile_1_1_bd_5_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile11_bd5), &dma_tile_1_1_bd_5_tensor, 0xB0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd5),  /* nextbd */ 6,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd5)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd5), XAie_TileLoc(1,1),  /* bd */ 5));
XAie_DmaDesc dma_tile11_bd6;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd6), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd6), XAie_LockInit(70,-1),XAie_LockInit(71,1)));
XAie_DmaTensor dma_tile_1_1_bd_6_tensor = {};
dma_tile_1_1_bd_6_tensor.NumDim = 4;
dma_tile_1_1_bd_6_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_1_1_bd_6_tensor.Dim){
  return 1;
}
dma_tile_1_1_bd_6_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 2048, /* Size */ 4};
dma_tile_1_1_bd_6_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 16};
dma_tile_1_1_bd_6_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 32, /* Size */ 64};
dma_tile_1_1_bd_6_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile11_bd6), &dma_tile_1_1_bd_6_tensor, 0x90000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd6),  /* nextbd */ 5,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd6)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd6), XAie_TileLoc(1,1),  /* bd */ 6));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */24, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */2, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 2, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */3, /* dmaDir */ DMA_S2MM, /* BdNum */26, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 3, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */4, /* dmaDir */ DMA_S2MM, /* BdNum */3, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 4, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */5, /* dmaDir */ DMA_S2MM, /* BdNum */27, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 5, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */1, /* dmaDir */ DMA_MM2S, /* BdNum */28, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 1, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */2, /* dmaDir */ DMA_MM2S, /* BdNum */5, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 2, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile21_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd0), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd0), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd0), /* addrA */ 0xC0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd0), XAie_TileLoc(2,1),  /* bd */ 0));
XAie_DmaDesc dma_tile21_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd1), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd1), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd1), /* addrA */ 0xA0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd1), XAie_TileLoc(2,1),  /* bd */ 1));
XAie_DmaDesc dma_tile21_bd24;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd24), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd24), XAie_LockInit(69,-1),XAie_LockInit(68,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd24), /* addrA */ 0xB0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd24),  /* nextbd */ 25,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd24)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd24), XAie_TileLoc(2,1),  /* bd */ 24));
XAie_DmaDesc dma_tile21_bd25;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd25), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd25), XAie_LockInit(71,-1),XAie_LockInit(70,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd25), /* addrA */ 0x90000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd25),  /* nextbd */ 24,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd25)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd25), XAie_TileLoc(2,1),  /* bd */ 25));
XAie_DmaDesc dma_tile21_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd2), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd2), XAie_LockInit(73,-1),XAie_LockInit(72,1)));
XAie_DmaTensor dma_tile_2_1_bd_2_tensor = {};
dma_tile_2_1_bd_2_tensor.NumDim = 2;
dma_tile_2_1_bd_2_tensor.Dim =__mlir_aie_alloc_dim_desc(2);
if(NULL == dma_tile_2_1_bd_2_tensor.Dim){
  return 1;
}
dma_tile_2_1_bd_2_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_2_1_bd_2_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 32};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile21_bd2), &dma_tile_2_1_bd_2_tensor, 0x80000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd2),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd2), XAie_TileLoc(2,1),  /* bd */ 2));
XAie_DmaDesc dma_tile21_bd26;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd26), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd26), XAie_LockInit(73,-1),XAie_LockInit(72,1)));
XAie_DmaTensor dma_tile_2_1_bd_26_tensor = {};
dma_tile_2_1_bd_26_tensor.NumDim = 2;
dma_tile_2_1_bd_26_tensor.Dim =__mlir_aie_alloc_dim_desc(2);
if(NULL == dma_tile_2_1_bd_26_tensor.Dim){
  return 1;
}
dma_tile_2_1_bd_26_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_2_1_bd_26_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 32};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile21_bd26), &dma_tile_2_1_bd_26_tensor, 0x80080,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd26),  /* nextbd */ 26,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd26)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd26), XAie_TileLoc(2,1),  /* bd */ 26));
XAie_DmaDesc dma_tile21_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd3), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd3), XAie_LockInit(73,-1),XAie_LockInit(72,1)));
XAie_DmaTensor dma_tile_2_1_bd_3_tensor = {};
dma_tile_2_1_bd_3_tensor.NumDim = 2;
dma_tile_2_1_bd_3_tensor.Dim =__mlir_aie_alloc_dim_desc(2);
if(NULL == dma_tile_2_1_bd_3_tensor.Dim){
  return 1;
}
dma_tile_2_1_bd_3_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_2_1_bd_3_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 32};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile21_bd3), &dma_tile_2_1_bd_3_tensor, 0x80100,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd3),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd3), XAie_TileLoc(2,1),  /* bd */ 3));
XAie_DmaDesc dma_tile21_bd27;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd27), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd27), XAie_LockInit(73,-1),XAie_LockInit(72,1)));
XAie_DmaTensor dma_tile_2_1_bd_27_tensor = {};
dma_tile_2_1_bd_27_tensor.NumDim = 2;
dma_tile_2_1_bd_27_tensor.Dim =__mlir_aie_alloc_dim_desc(2);
if(NULL == dma_tile_2_1_bd_27_tensor.Dim){
  return 1;
}
dma_tile_2_1_bd_27_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_2_1_bd_27_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 32};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile21_bd27), &dma_tile_2_1_bd_27_tensor, 0x80180,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd27),  /* nextbd */ 27,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd27)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd27), XAie_TileLoc(2,1),  /* bd */ 27));
XAie_DmaDesc dma_tile21_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd4), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd4), XAie_LockInit(72,-4),XAie_LockInit(73,4)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd4), /* addrA */ 0x80000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd4), XAie_TileLoc(2,1),  /* bd */ 4));
XAie_DmaDesc dma_tile21_bd28;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd28), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd28), XAie_LockInit(64,-1),XAie_LockInit(65,1)));
XAie_DmaTensor dma_tile_2_1_bd_28_tensor = {};
dma_tile_2_1_bd_28_tensor.NumDim = 3;
dma_tile_2_1_bd_28_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_2_1_bd_28_tensor.Dim){
  return 1;
}
dma_tile_2_1_bd_28_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 4, /* Size */ 32};
dma_tile_2_1_bd_28_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_2_1_bd_28_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 4};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile21_bd28), &dma_tile_2_1_bd_28_tensor, 0xC0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd28),  /* nextbd */ 29,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd28)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd28), XAie_TileLoc(2,1),  /* bd */ 28));
XAie_DmaDesc dma_tile21_bd29;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd29), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd29), XAie_LockInit(66,-1),XAie_LockInit(67,1)));
XAie_DmaTensor dma_tile_2_1_bd_29_tensor = {};
dma_tile_2_1_bd_29_tensor.NumDim = 3;
dma_tile_2_1_bd_29_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_2_1_bd_29_tensor.Dim){
  return 1;
}
dma_tile_2_1_bd_29_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 4, /* Size */ 32};
dma_tile_2_1_bd_29_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_2_1_bd_29_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 4};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile21_bd29), &dma_tile_2_1_bd_29_tensor, 0xA0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd29),  /* nextbd */ 28,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd29)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd29), XAie_TileLoc(2,1),  /* bd */ 29));
XAie_DmaDesc dma_tile21_bd5;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd5), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd5), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
XAie_DmaTensor dma_tile_2_1_bd_5_tensor = {};
dma_tile_2_1_bd_5_tensor.NumDim = 4;
dma_tile_2_1_bd_5_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_2_1_bd_5_tensor.Dim){
  return 1;
}
dma_tile_2_1_bd_5_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 2048, /* Size */ 4};
dma_tile_2_1_bd_5_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 16};
dma_tile_2_1_bd_5_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 32, /* Size */ 64};
dma_tile_2_1_bd_5_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile21_bd5), &dma_tile_2_1_bd_5_tensor, 0xB0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd5),  /* nextbd */ 6,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd5)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd5), XAie_TileLoc(2,1),  /* bd */ 5));
XAie_DmaDesc dma_tile21_bd6;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd6), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd6), XAie_LockInit(70,-1),XAie_LockInit(71,1)));
XAie_DmaTensor dma_tile_2_1_bd_6_tensor = {};
dma_tile_2_1_bd_6_tensor.NumDim = 4;
dma_tile_2_1_bd_6_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_2_1_bd_6_tensor.Dim){
  return 1;
}
dma_tile_2_1_bd_6_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 2048, /* Size */ 4};
dma_tile_2_1_bd_6_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 16};
dma_tile_2_1_bd_6_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 32, /* Size */ 64};
dma_tile_2_1_bd_6_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile21_bd6), &dma_tile_2_1_bd_6_tensor, 0x90000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd6),  /* nextbd */ 5,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd6)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd6), XAie_TileLoc(2,1),  /* bd */ 6));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */24, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */2, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 2, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */3, /* dmaDir */ DMA_S2MM, /* BdNum */26, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 3, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */4, /* dmaDir */ DMA_S2MM, /* BdNum */3, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 4, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */5, /* dmaDir */ DMA_S2MM, /* BdNum */27, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 5, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */1, /* dmaDir */ DMA_MM2S, /* BdNum */28, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 1, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */2, /* dmaDir */ DMA_MM2S, /* BdNum */5, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 2, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile31_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd0), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd0), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile31_bd0), /* addrA */ 0xC0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd0), XAie_TileLoc(3,1),  /* bd */ 0));
XAie_DmaDesc dma_tile31_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd1), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd1), XAie_LockInit(67,-1),XAie_LockInit(66,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile31_bd1), /* addrA */ 0xA0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd1), XAie_TileLoc(3,1),  /* bd */ 1));
XAie_DmaDesc dma_tile31_bd24;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd24), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd24), XAie_LockInit(69,-1),XAie_LockInit(68,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile31_bd24), /* addrA */ 0xB0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd24),  /* nextbd */ 25,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd24)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd24), XAie_TileLoc(3,1),  /* bd */ 24));
XAie_DmaDesc dma_tile31_bd25;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd25), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd25), XAie_LockInit(71,-1),XAie_LockInit(70,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile31_bd25), /* addrA */ 0x90000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd25),  /* nextbd */ 24,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd25)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd25), XAie_TileLoc(3,1),  /* bd */ 25));
XAie_DmaDesc dma_tile31_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd2), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd2), XAie_LockInit(73,-1),XAie_LockInit(72,1)));
XAie_DmaTensor dma_tile_3_1_bd_2_tensor = {};
dma_tile_3_1_bd_2_tensor.NumDim = 2;
dma_tile_3_1_bd_2_tensor.Dim =__mlir_aie_alloc_dim_desc(2);
if(NULL == dma_tile_3_1_bd_2_tensor.Dim){
  return 1;
}
dma_tile_3_1_bd_2_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_3_1_bd_2_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 32};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile31_bd2), &dma_tile_3_1_bd_2_tensor, 0x80000,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd2),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd2), XAie_TileLoc(3,1),  /* bd */ 2));
XAie_DmaDesc dma_tile31_bd26;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd26), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd26), XAie_LockInit(73,-1),XAie_LockInit(72,1)));
XAie_DmaTensor dma_tile_3_1_bd_26_tensor = {};
dma_tile_3_1_bd_26_tensor.NumDim = 2;
dma_tile_3_1_bd_26_tensor.Dim =__mlir_aie_alloc_dim_desc(2);
if(NULL == dma_tile_3_1_bd_26_tensor.Dim){
  return 1;
}
dma_tile_3_1_bd_26_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_3_1_bd_26_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 32};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile31_bd26), &dma_tile_3_1_bd_26_tensor, 0x80080,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd26),  /* nextbd */ 26,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd26)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd26), XAie_TileLoc(3,1),  /* bd */ 26));
XAie_DmaDesc dma_tile31_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd3), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd3), XAie_LockInit(73,-1),XAie_LockInit(72,1)));
XAie_DmaTensor dma_tile_3_1_bd_3_tensor = {};
dma_tile_3_1_bd_3_tensor.NumDim = 2;
dma_tile_3_1_bd_3_tensor.Dim =__mlir_aie_alloc_dim_desc(2);
if(NULL == dma_tile_3_1_bd_3_tensor.Dim){
  return 1;
}
dma_tile_3_1_bd_3_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_3_1_bd_3_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 32};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile31_bd3), &dma_tile_3_1_bd_3_tensor, 0x80100,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd3),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd3), XAie_TileLoc(3,1),  /* bd */ 3));
XAie_DmaDesc dma_tile31_bd27;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd27), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd27), XAie_LockInit(73,-1),XAie_LockInit(72,1)));
XAie_DmaTensor dma_tile_3_1_bd_27_tensor = {};
dma_tile_3_1_bd_27_tensor.NumDim = 2;
dma_tile_3_1_bd_27_tensor.Dim =__mlir_aie_alloc_dim_desc(2);
if(NULL == dma_tile_3_1_bd_27_tensor.Dim){
  return 1;
}
dma_tile_3_1_bd_27_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_3_1_bd_27_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 32};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile31_bd27), &dma_tile_3_1_bd_27_tensor, 0x80180,  /* len */ 8192));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd27),  /* nextbd */ 27,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd27)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd27), XAie_TileLoc(3,1),  /* bd */ 27));
XAie_DmaDesc dma_tile31_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd4), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd4), XAie_LockInit(72,-4),XAie_LockInit(73,4)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile31_bd4), /* addrA */ 0x80000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd4),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd4), XAie_TileLoc(3,1),  /* bd */ 4));
XAie_DmaDesc dma_tile31_bd28;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd28), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd28), XAie_LockInit(64,-1),XAie_LockInit(65,1)));
XAie_DmaTensor dma_tile_3_1_bd_28_tensor = {};
dma_tile_3_1_bd_28_tensor.NumDim = 3;
dma_tile_3_1_bd_28_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_3_1_bd_28_tensor.Dim){
  return 1;
}
dma_tile_3_1_bd_28_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 4, /* Size */ 32};
dma_tile_3_1_bd_28_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_3_1_bd_28_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 4};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile31_bd28), &dma_tile_3_1_bd_28_tensor, 0xC0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd28),  /* nextbd */ 29,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd28)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd28), XAie_TileLoc(3,1),  /* bd */ 28));
XAie_DmaDesc dma_tile31_bd29;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd29), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd29), XAie_LockInit(66,-1),XAie_LockInit(67,1)));
XAie_DmaTensor dma_tile_3_1_bd_29_tensor = {};
dma_tile_3_1_bd_29_tensor.NumDim = 3;
dma_tile_3_1_bd_29_tensor.Dim =__mlir_aie_alloc_dim_desc(3);
if(NULL == dma_tile_3_1_bd_29_tensor.Dim){
  return 1;
}
dma_tile_3_1_bd_29_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 4, /* Size */ 32};
dma_tile_3_1_bd_29_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 128, /* Size */ 64};
dma_tile_3_1_bd_29_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 4};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile31_bd29), &dma_tile_3_1_bd_29_tensor, 0xA0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd29),  /* nextbd */ 28,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd29)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd29), XAie_TileLoc(3,1),  /* bd */ 29));
XAie_DmaDesc dma_tile31_bd5;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd5), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd5), XAie_LockInit(68,-1),XAie_LockInit(69,1)));
XAie_DmaTensor dma_tile_3_1_bd_5_tensor = {};
dma_tile_3_1_bd_5_tensor.NumDim = 4;
dma_tile_3_1_bd_5_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_3_1_bd_5_tensor.Dim){
  return 1;
}
dma_tile_3_1_bd_5_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 2048, /* Size */ 4};
dma_tile_3_1_bd_5_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 16};
dma_tile_3_1_bd_5_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 32, /* Size */ 64};
dma_tile_3_1_bd_5_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile31_bd5), &dma_tile_3_1_bd_5_tensor, 0xB0000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd5),  /* nextbd */ 6,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd5)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd5), XAie_TileLoc(3,1),  /* bd */ 5));
XAie_DmaDesc dma_tile31_bd6;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile31_bd6), XAie_TileLoc(3,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile31_bd6), XAie_LockInit(70,-1),XAie_LockInit(71,1)));
XAie_DmaTensor dma_tile_3_1_bd_6_tensor = {};
dma_tile_3_1_bd_6_tensor.NumDim = 4;
dma_tile_3_1_bd_6_tensor.Dim =__mlir_aie_alloc_dim_desc(4);
if(NULL == dma_tile_3_1_bd_6_tensor.Dim){
  return 1;
}
dma_tile_3_1_bd_6_tensor.Dim[3].AieMlDimDesc = { /* Stride */ 2048, /* Size */ 4};
dma_tile_3_1_bd_6_tensor.Dim[2].AieMlDimDesc = { /* Stride */ 2, /* Size */ 16};
dma_tile_3_1_bd_6_tensor.Dim[1].AieMlDimDesc = { /* Stride */ 32, /* Size */ 64};
dma_tile_3_1_bd_6_tensor.Dim[0].AieMlDimDesc = { /* Stride */ 1, /* Size */ 2};
__mlir_aie_try(XAie_DmaSetMultiDimAddr(&(dma_tile31_bd6), &dma_tile_3_1_bd_6_tensor, 0x90000,  /* len */ 32768));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile31_bd6),  /* nextbd */ 5,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile31_bd6)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile31_bd6), XAie_TileLoc(3,1),  /* bd */ 6));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */24, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */2, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */ 2, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */3, /* dmaDir */ DMA_S2MM, /* BdNum */26, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */ 3, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */4, /* dmaDir */ DMA_S2MM, /* BdNum */3, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */ 4, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */5, /* dmaDir */ DMA_S2MM, /* BdNum */27, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */ 5, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */1, /* dmaDir */ DMA_MM2S, /* BdNum */28, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */ 1, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */2, /* dmaDir */ DMA_MM2S, /* BdNum */5, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,1), /* ChNum */ 2, /* dmaDir */ DMA_MM2S));
return XAIE_OK;
} // mlir_aie_configure_dmas

int mlir_aie_initialize_locks(aie_libxaie_ctx_t* ctx) {
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,1), XAie_LockInit(9, 4)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,1), XAie_LockInit(8, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,1), XAie_LockInit(7, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,1), XAie_LockInit(6, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,1), XAie_LockInit(5, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,1), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,1), XAie_LockInit(3, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,1), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,1), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,1), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(9, 4)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(8, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(7, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(6, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(5, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(3, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(9, 4)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(8, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(7, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(6, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(5, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(3, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(9, 4)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(8, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(7, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(6, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(5, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(3, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,1), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(5, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(3, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(5, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(3, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(5, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(3, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(5, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(3, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(5, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(3, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(5, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(3, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(5, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(3, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(5, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(3, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(5, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(3, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(5, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(3, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(5, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(3, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(5, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(3, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(5, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(3, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(5, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(3, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(5, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(3, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(0, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(5, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(4, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(3, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(2, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(1, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(0, 0)));
return XAIE_OK;
} // mlir_aie_initialize_locks
int mlir_aie_configure_switchboxes(aie_libxaie_ctx_t* ctx) {
  int x, y;
// Core Stream Switch column 3 row 0
x = 3;
y = 0;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 7, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, SOUTH, 2));
__mlir_aie_try(XAie_StrmPktSwMstrPortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, /* drop_header */ XAIE_SS_PKT_DONOT_DROP_HEADER, /* arbiter */ 5, /* MSelEn */ 0x8));
__mlir_aie_try(XAie_StrmPktSwSlavePortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0));
__mlir_aie_try(XAie_StrmPktSwSlaveSlotEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0, /* slot */ 0, /* packet */ XAie_PacketInit(15,0), /* mask */ 0x1F, /* msel */ 3, /* arbiter */ 5));
// Core Stream Switch column 3 row 1
x = 3;
y = 1;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 1, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 2, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 3, DMA, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, DMA, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, DMA, 4));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, DMA, 5));
// Core Stream Switch column 2 row 0
x = 2;
y = 0;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 7, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, SOUTH, 2));
__mlir_aie_try(XAie_StrmPktSwMstrPortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, /* drop_header */ XAIE_SS_PKT_DONOT_DROP_HEADER, /* arbiter */ 5, /* MSelEn */ 0x8));
__mlir_aie_try(XAie_StrmPktSwSlavePortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0));
__mlir_aie_try(XAie_StrmPktSwSlaveSlotEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0, /* slot */ 0, /* packet */ XAie_PacketInit(15,0), /* mask */ 0x1F, /* msel */ 3, /* arbiter */ 5));
// Core Stream Switch column 2 row 1
x = 2;
y = 1;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 1, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 2, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, DMA, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, DMA, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 3, DMA, 4));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, DMA, 5));
// Core Stream Switch column 1 row 0
x = 1;
y = 0;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 7, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, SOUTH, 2));
__mlir_aie_try(XAie_StrmPktSwMstrPortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, /* drop_header */ XAIE_SS_PKT_DONOT_DROP_HEADER, /* arbiter */ 5, /* MSelEn */ 0x8));
__mlir_aie_try(XAie_StrmPktSwSlavePortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0));
__mlir_aie_try(XAie_StrmPktSwSlaveSlotEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0, /* slot */ 0, /* packet */ XAie_PacketInit(15,0), /* mask */ 0x1F, /* msel */ 3, /* arbiter */ 5));
// Core Stream Switch column 1 row 1
x = 1;
y = 1;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 1, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 2, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, DMA, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, DMA, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 3, DMA, 4));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, DMA, 5));
// Core Stream Switch column 0 row 0
x = 0;
y = 0;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 7, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, SOUTH, 2));
__mlir_aie_try(XAie_StrmPktSwMstrPortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, /* drop_header */ XAIE_SS_PKT_DONOT_DROP_HEADER, /* arbiter */ 5, /* MSelEn */ 0x8));
__mlir_aie_try(XAie_StrmPktSwSlavePortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0));
__mlir_aie_try(XAie_StrmPktSwSlaveSlotEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0, /* slot */ 0, /* packet */ XAie_PacketInit(15,0), /* mask */ 0x1F, /* msel */ 3, /* arbiter */ 5));
// Core Stream Switch column 0 row 1
x = 0;
y = 1;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 1, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 2, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, DMA, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, DMA, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, DMA, 4));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 3, DMA, 5));
// Core Stream Switch column 0 row 2
x = 0;
y = 2;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 1, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, EAST, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 3, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 2, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 0, NORTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, NORTH, 4));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, EAST, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, SOUTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 3, SOUTH, 3));
// Core Stream Switch column 0 row 3
x = 0;
y = 3;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 4));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 4, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, SOUTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 3));
// Core Stream Switch column 0 row 4
x = 0;
y = 4;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 3, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 4, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 0));
// Core Stream Switch column 0 row 5
x = 0;
y = 5;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 2, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 0));
// Core Stream Switch column 1 row 2
x = 1;
y = 2;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 0, WEST, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, EAST, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 2, EAST, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 3, WEST, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 3, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 2, WEST, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, WEST, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, EAST, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 3, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, SOUTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 3, SOUTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 2));
// Core Stream Switch column 1 row 4
x = 1;
y = 4;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 1, WEST, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 1, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 2, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 2, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, EAST, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, EAST, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, EAST, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 3));
// Core Stream Switch column 1 row 5
x = 1;
y = 5;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, WEST, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, EAST, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 0));
// Core Stream Switch column 2 row 2
x = 2;
y = 2;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 2, WEST, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 2, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, WEST, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 1, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 2, EAST, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 3, WEST, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 3, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, WEST, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, EAST, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 3, EAST, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, SOUTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, SOUTH, 2));
// Core Stream Switch column 2 row 3
x = 2;
y = 3;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, WEST, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, WEST, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, SOUTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 3, SOUTH, 2));
// Core Stream Switch column 2 row 4
x = 2;
y = 4;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, WEST, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, WEST, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 3, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 3, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 2, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 1, EAST, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 3));
// Core Stream Switch column 3 row 2
x = 3;
y = 2;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, WEST, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 1, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, WEST, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 2, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 0, NORTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 3, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, SOUTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 2, SOUTH, 0));
// Core Stream Switch column 1 row 3
x = 1;
y = 3;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 2, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 3, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, NORTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, SOUTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 3, SOUTH, 0));
// Core Stream Switch column 2 row 5
x = 2;
y = 5;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 0, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 0));
// Core Stream Switch column 3 row 3
x = 3;
y = 3;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 3, SOUTH, 2));
// Core Stream Switch column 3 row 4
x = 3;
y = 4;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 3, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, SOUTH, 3));
// Core Stream Switch column 3 row 5
x = 3;
y = 5;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 0));
// ShimMux column 3 row 0
// NOTE ShimMux always connects from the south as directions are defined relative to the tile stream switch
x = 3;
y = 0;
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 3));
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 7));
__mlir_aie_try(XAie_EnableAieToShimDmaStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 2));
// ShimMux column 2 row 0
// NOTE ShimMux always connects from the south as directions are defined relative to the tile stream switch
x = 2;
y = 0;
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 3));
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 7));
__mlir_aie_try(XAie_EnableAieToShimDmaStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 2));
// ShimMux column 1 row 0
// NOTE ShimMux always connects from the south as directions are defined relative to the tile stream switch
x = 1;
y = 0;
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 3));
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 7));
__mlir_aie_try(XAie_EnableAieToShimDmaStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 2));
// ShimMux column 0 row 0
// NOTE ShimMux always connects from the south as directions are defined relative to the tile stream switch
x = 0;
y = 0;
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 3));
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 7));
__mlir_aie_try(XAie_EnableAieToShimDmaStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 2));
return XAIE_OK;
} // mlir_aie_configure_switchboxes

int mlir_aie_configure_cascade(aie_libxaie_ctx_t* ctx) {
return XAIE_OK;
} // mlir_aie_configure_cascade

// buffer buf64 with unsupported type memref<16x16x4x4xbf16, 2>;
// buffer buf63 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf62 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf61 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf60 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf97 with unsupported type memref<64x256xbf16, 1>;
// buffer buf93 with unsupported type memref<256x64xbf16, 1>;
// buffer buf89 with unsupported type memref<64x256xbf16, 1>;
// buffer buf85 with unsupported type memref<256x64xbf16, 1>;
// buffer buf80 with unsupported type memref<64x256xbf16, 1>;
// buffer buf96 with unsupported type memref<64x256xbf16, 1>;
// buffer buf92 with unsupported type memref<256x64xbf16, 1>;
// buffer buf88 with unsupported type memref<64x256xbf16, 1>;
// buffer buf84 with unsupported type memref<256x64xbf16, 1>;
// buffer buf81 with unsupported type memref<64x256xbf16, 1>;
// buffer buf79 with unsupported type memref<16x16x4x4xbf16, 2>;
// buffer buf78 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf77 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf76 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf75 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf74 with unsupported type memref<16x16x4x4xbf16, 2>;
// buffer buf73 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf72 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf71 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf70 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf49 with unsupported type memref<16x16x4x4xbf16, 2>;
// buffer buf48 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf47 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf46 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf45 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf69 with unsupported type memref<16x16x4x4xbf16, 2>;
// buffer buf68 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf67 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf66 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf65 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf44 with unsupported type memref<16x16x4x4xbf16, 2>;
// buffer buf43 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf42 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf41 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf40 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf59 with unsupported type memref<16x16x4x4xbf16, 2>;
// buffer buf58 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf57 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf56 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf55 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf34 with unsupported type memref<16x16x4x4xbf16, 2>;
// buffer buf33 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf32 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf31 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf30 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf24 with unsupported type memref<16x16x4x4xbf16, 2>;
// buffer buf23 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf22 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf21 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf20 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf54 with unsupported type memref<16x16x4x4xbf16, 2>;
// buffer buf53 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf52 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf51 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf50 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf4 with unsupported type memref<16x16x4x4xbf16, 2>;
// buffer buf3 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf2 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf1 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf0 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf29 with unsupported type memref<16x16x4x4xbf16, 2>;
// buffer buf28 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf27 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf26 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf25 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf14 with unsupported type memref<16x16x4x4xbf16, 2>;
// buffer buf13 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf12 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf11 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf10 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf9 with unsupported type memref<16x16x4x4xbf16, 2>;
// buffer buf8 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf7 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf6 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf5 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf99 with unsupported type memref<64x256xbf16, 1>;
// buffer buf95 with unsupported type memref<256x64xbf16, 1>;
// buffer buf91 with unsupported type memref<64x256xbf16, 1>;
// buffer buf87 with unsupported type memref<256x64xbf16, 1>;
// buffer buf83 with unsupported type memref<64x256xbf16, 1>;
// buffer buf19 with unsupported type memref<16x16x4x4xbf16, 2>;
// buffer buf18 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf17 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf16 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf15 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf98 with unsupported type memref<64x256xbf16, 1>;
// buffer buf94 with unsupported type memref<256x64xbf16, 1>;
// buffer buf90 with unsupported type memref<64x256xbf16, 1>;
// buffer buf86 with unsupported type memref<256x64xbf16, 1>;
// buffer buf82 with unsupported type memref<64x256xbf16, 1>;
// buffer buf39 with unsupported type memref<16x16x4x4xbf16, 2>;
// buffer buf38 with unsupported type memref<16x8x8x4xbf16, 2>;
// buffer buf37 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf36 with unsupported type memref<8x16x4x8xbf16, 2>;
// buffer buf35 with unsupported type memref<16x8x8x4xbf16, 2>;
