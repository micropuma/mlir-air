module {
  airrt.module_metadata{
    airrt.segment_metadata attributes {dma_allocations = [], sym_name = "graph_0"}{
      airrt.herd_metadata {dma_allocations = [{channel = 0 : i64, col = 0 : i64, id = 2 : i64, location = 7 : i64, row = 0 : i64}, {channel = 2 : i64, col = 0 : i64, id = 1 : i64, location = 7 : i64, row = 0 : i64}], sym_name = "copyherd"}
    }
  }
  func.func @graph(%arg0: memref<256xi32>, %arg1: memref<256xi32>) {
    %c2_i32 = arith.constant 2 : i32
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %c1_i32 = arith.constant 1 : i32
    affine.for %arg2 = 0 to 1 {
      affine.for %arg3 = 0 to 1 {
        %p = airrt.segment_load "graph_0" : i64
        affine.for %arg4 = 0 to 1 {
          %h = airrt.herd_load "copyherd" () : () -> i64
          affine.for %arg5 = 0 to 1 {
            affine.for %arg6 = 0 to 1 {
              %0 = arith.index_cast %arg6 : index to i64
              %1 = arith.index_cast %arg5 : index to i64
              airrt.dma_memcpy_nd(%c1_i32, %0, %1, %arg0[%c0_i64, %c0_i64, %c0_i64, %c0_i64], [%c1_i64, %c1_i64, %c1_i64, %c1_i64], [%c0_i64, %c0_i64, %c0_i64]) : (i32, i64, i64, memref<256xi32>, [i64, i64, i64, i64], [i64, i64, i64, i64], [i64, i64, i64])
              airrt.dma_memcpy_nd(%c2_i32, %0, %1, %arg1[%c0_i64, %c0_i64, %c0_i64, %c0_i64], [%c1_i64, %c1_i64, %c1_i64, %c1_i64], [%c0_i64, %c0_i64, %c0_i64]) : (i32, i64, i64, memref<256xi32>, [i64, i64, i64, i64], [i64, i64, i64, i64], [i64, i64, i64])
            } {air.herd = "inner"}
          } {air.herd = "outer"}
        }
      }
    } {affine_opt_label = "tiling"}
    return
  }
}
