module {
  airrt.module_metadata{
    airrt.segment_metadata attributes {dma_allocations = [], sym_name = "graph_0"}{
      airrt.herd_metadata {dma_allocations = [], sym_name = "copyherd"}
    }
  }
  func.func @graph(%arg0: memref<256xi32>, %arg1: memref<256xi32>) {
    %c4_i32 = arith.constant 4 : i32
    %c0_i64 = arith.constant 0 : i64
    %c3_i32 = arith.constant 3 : i32
    %c1_i64 = arith.constant 1 : i64
    %c256_i64 = arith.constant 256 : i64
    airrt.dma_memcpy_nd(%c3_i32, %c0_i64, %c0_i64, %arg0[%c0_i64, %c0_i64, %c0_i64, %c0_i64], [%c1_i64, %c1_i64, %c1_i64, %c256_i64], [%c0_i64, %c0_i64, %c0_i64]) {metadata = @air_channel_0} : (i32, i64, i64, memref<256xi32>, [i64, i64, i64, i64], [i64, i64, i64, i64], [i64, i64, i64])
    airrt.dma_memcpy_nd(%c4_i32, %c0_i64, %c0_i64, %arg1[%c0_i64, %c0_i64, %c0_i64, %c0_i64], [%c1_i64, %c1_i64, %c1_i64, %c256_i64], [%c0_i64, %c0_i64, %c0_i64]) {metadata = @air_channel_1} : (i32, i64, i64, memref<256xi32>, [i64, i64, i64, i64], [i64, i64, i64, i64], [i64, i64, i64])
    affine.for %arg2 = 0 to 1 {
      affine.for %arg3 = 0 to 1 {
        %p = airrt.segment_load "graph_0" : i64
        affine.for %arg4 = 0 to 1 {
          %h = airrt.herd_load "copyherd" () : () -> i64
        }
      }
    } {affine_opt_label = "tiling"}
    return
  }
}
