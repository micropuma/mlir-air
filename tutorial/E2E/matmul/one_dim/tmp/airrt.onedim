module {
  airrt.module_metadata{
    airrt.segment_metadata attributes {dma_allocations = [], sym_name = "matadd_0"}{
      airrt.herd_metadata {dma_allocations = [], sym_name = "herd_0"}
    }
  }
  func.func @matadd(%arg0: memref<2x2xf32>, %arg1: memref<2x2xf32>, %arg2: memref<2x2xf32>) {
    %c1_i64 = arith.constant 1 : i64
    %c2_i64 = arith.constant 2 : i64
    %c0_i64 = arith.constant 0 : i64
    %c6_i32 = arith.constant 6 : i32
    %c5_i32 = arith.constant 5 : i32
    %c4_i32 = arith.constant 4 : i32
    %alloc = memref.alloc() : memref<2x2xf32>
    affine.for %arg3 = 0 to 2 {
      affine.for %arg4 = 0 to 2 {
        %0 = arith.index_cast %arg3 : index to i64
        %1 = arith.index_cast %arg4 : index to i64
        %2 = airrt.dma_memcpy_nd(%c4_i32, %0, %1, %arg0[%c0_i64, %c0_i64, %0, %1], [%c1_i64, %c1_i64, %c1_i64, %c1_i64], [%c0_i64, %c0_i64, %c2_i64]) {metadata = @air_channel_1} : (i32, i64, i64, memref<2x2xf32>, [i64, i64, i64, i64], [i64, i64, i64, i64], [i64, i64, i64]) : !airrt.event
      }
    } {affine_opt_label = "tiling"}
    affine.for %arg3 = 0 to 2 {
      affine.for %arg4 = 0 to 2 {
        %0 = arith.index_cast %arg3 : index to i64
        %1 = arith.index_cast %arg4 : index to i64
        %2 = airrt.dma_memcpy_nd(%c5_i32, %0, %1, %arg1[%c0_i64, %c0_i64, %0, %1], [%c1_i64, %c1_i64, %c1_i64, %c1_i64], [%c0_i64, %c0_i64, %c2_i64]) {metadata = @air_channel_1} : (i32, i64, i64, memref<2x2xf32>, [i64, i64, i64, i64], [i64, i64, i64, i64], [i64, i64, i64]) : !airrt.event
      }
    } {affine_opt_label = "tiling"}
    affine.for %arg3 = 0 to 2 {
      affine.for %arg4 = 0 to 2 {
        %0 = arith.index_cast %arg3 : index to i64
        %1 = arith.index_cast %arg4 : index to i64
        %2 = airrt.dma_memcpy_nd(%c6_i32, %0, %1, %alloc[%c0_i64, %c0_i64, %0, %1], [%c1_i64, %c1_i64, %c1_i64, %c1_i64], [%c0_i64, %c0_i64, %c2_i64]) {metadata = @air_channel_2} : (i32, i64, i64, memref<2x2xf32>, [i64, i64, i64, i64], [i64, i64, i64, i64], [i64, i64, i64]) : !airrt.event
      }
    } {affine_opt_label = "tiling"}
    affine.for %arg3 = 0 to 1 {
      affine.for %arg4 = 0 to 1 {
        %p = airrt.segment_load "matadd_0" : i64
        affine.for %arg5 = 0 to 1 {
          %h = airrt.herd_load "herd_0" () : () -> i64
        }
      }
    } {affine_opt_label = "tiling"}
    memref.copy %alloc, %arg2 : memref<2x2xf32> to memref<2x2xf32>
    memref.dealloc %alloc : memref<2x2xf32>
    return
  }
}
